                                                    _              
                          /\                       | |             
  _ __  _ __ ___   ___   /  \   _ __   ___ ___  ___| |_ _ __ _   _ 
 | '_ \| '__/ _ \ / __| / /\ \ | '_ \ / __/ _ \/ __| __| '__| | | |
 | |_) | | | (_) | (__ / ____ \| | | | (_|  __/\__ \ |_| |  | |_| |
 | .__/|_|  \___/ \___/_/    \_\_| |_|\___\___||___/\__|_|   \__, |
 | |                                                          __/ |
 |_|                                                         |___/ 

=== Authors ===
Jean Claude Zarate <jzarate@wpi.edu>
James Jay Scherick <jjscherick@wpi.edu>

=== Project Structure ===
There is a Makefile, cs3013_project2.c, and procAncestry.c
Utilizing the Makefile, you can compile these into cs3013_project2.ko and procAncestry
See the below sections for compiling and running the program.

=== Compiling ===
There is an included Makefile. Run

$ make

To compile procAncestry and the kernel module, cs3013_project2.ko

To delete the generated files, run

$ make clean

=== Running ===

First you insert the kernel module, run

$ sudo insmod cs3013_project2.ko

The module will not be loaded if you reboot the system, so you must run this after every reboot.

To unload the module, run

$ sudo rmmod cs3013_project2

To run the program, run

$ ./procAncestry <target_pid>

For the program to work properly, please make sure that the kernel module is loaded while running the program.

=== Features & Limitations ===

- procAncestry is supplied with a pid. If the pid does not belong to a process, the program will output an error message.

- procAncestry will print out the pids of up to 100 children of the process that has the given pid.

- procAncestry will print out the siblings of up to 100 siblings of the process that has the given pid

- procAncestry will print out up to 10 ancestors of the process that has the given pid.

=== Credits ===

- ASCII Art in the README generated by http://patorjk.com/software/taag
